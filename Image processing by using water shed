import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the image
img = cv2.imread('image_path.jpg')  # Replace 'image_path.jpg' with the actual image path

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply thresholding to create a binary image
_, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Perform morphological operations to clean up the image
kernel = np.ones((3, 3), np.uint8)
opening = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel, iterations=2)
sure_bg = cv2.dilate(opening, kernel, iterations=3)

# Find sure foreground areas using distance transform
dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

# Find unknown regions
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

# Marker labeling for watershed algorithm
_, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1
markers[unknown == 255] = 0

# Apply watershed algorithm
markers = cv2.watershed(img, markers)

# Highlight boundaries in the original image
img[markers == -1] = [0, 0, 255]  # Mark watershed boundaries in red

# Display the results
plt.figure(figsize=(12, 8))

plt.subplot(231), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title('Original Image'), plt.axis('off')

plt.subplot(232), plt.imshow(gray, cmap='gray')
plt.title('Grayscale Image'), plt.axis('off')

plt.subplot(233), plt.imshow(binary, cmap='gray')
plt.title('Binary Image'), plt.axis('off')

plt.subplot(234), plt.imshow(opening, cmap='gray')
plt.title('Morphological Opening'), plt.axis('off')

plt.subplot(235), plt.imshow(sure_bg, cmap='gray')
plt.title('Sure Background'), plt.axis('off')

plt.subplot(236), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.imshow(markers, cmap='jet', alpha=0.7)
plt.title('Watershed Segmentation'), plt.axis('off')

plt.tight_layout()
plt.show()
