import cv2
import numpy as np
from matplotlib import pyplot as plt

# Read the image
img = cv2.imread('your_image_path.jpg')  # Replace 'your_image_path.jpg' with the actual image path

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Noise removal using Gaussian blur
blur = cv2.GaussianBlur(gray, (5, 5), 0)

# Thresholding (you may need to adjust the threshold value based on your image)
_, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Sure background area using dilatation
kernel = np.ones((3, 3), np.uint8)
sure_bg = cv2.dilate(thresh, kernel, iterations=3)

# Marker labelling using connected components
_, markers = cv2.connectedComponents(sure_bg)
markers = markers + 1
markers[thresh == 255] = 0  # Mark the sure foreground area

# Apply watershed algorithm
markers = cv2.watershed(img, markers)
img[markers == -1] = [255, 0, 0]  # Mark boundary region with red color

# Display the results
plt.subplot(2, 2, 1), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title('Original Image'), plt.xticks([]), plt.yticks([])

plt.subplot(2, 2, 2), plt.imshow(thresh, cmap='gray')
plt.title('Thresholded Image'), plt.xticks([]), plt.yticks([])

plt.subplot(2, 2, 3), plt.imshow(markers, cmap='jet')
plt.title('Marker Labels'), plt.xticks([]), plt.yticks([])

plt.show()
